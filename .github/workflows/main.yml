name: 'CI Multiplatform Build'

on:
  push:
    paths-ignore:
      - '**.md'
    branches: [ "staging" ]
    tags:
      - '*'
  pull_request:
    paths-ignore:
      - '**.md'
    branches: [ "staging" ]

env:
  InstallPath: "obs-studio-node"
  BUILD_DIRECTORY: "streamlabs-build"
  RELEASE_BUCKET: "obsstudionodes3.streamlabs.com"
  RuntimeURL: https://atom.io/download/atom-shell
  RuntimeName: iojs
  ElectronVersion: 13.4.0
  SLGenerator: Visual Studio 16 2019
  SLDistributeDirectory: distribute
  SLFullDistributePath: "streamlabs-build\\distribute"
  LibOBSVersion: 27.5.38
  PACKAGE_NAME: osn

jobs:
  macos64:
    name: 'macOS 64-bit'
    runs-on: [macos-latest]
    strategy:
      matrix:
        ReleaseName: [release, debug]
        include:
        - ReleaseName: release
          BuildConfig: RelWithDebInfo
          CefBuildConfig: Release
        - ReleaseName: debug
          BuildConfig: Debug
          CefBuildConfig: Debug
    env:
      OS_TAG: "osx"
      CEF_MAC_BUILD_VERSION: 4638
      MACOS_DEPS_VERSION: 2022-02-13
      VLC_VERSION: 3.0.8
      MIN_MACOS_VERSION: 10.13
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: Tar artifact for deployment
        if: startsWith(github.ref, 'refs/tags/')
        run: cd ${{env.InstallPath}} && 7z a -r ../${{env.TARGET_ARTIFACT}}.7z *
        env:
          TARGET_ARTIFACT: ${{env.PACKAGE_NAME}}-${{env.OS_TAG}}-${{matrix.ReleaseName}}-${{ steps.get_version.outputs.VERSION }}
      - name: Configure AWS credentials
        if: startsWith(github.ref, 'refs/tags/')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_RELEASE_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_RELEASE_SECRET_ACCESS_KEY}}
          aws-region: us-west-2
      - name: Deploy
        if: startsWith(github.ref, 'refs/tags/')
        run: aws s3 cp ${{env.TARGET_ARTIFACT}}.7z s3://${{env.RELEASE_BUCKET}} --acl public-read
        env:
          TARGET_ARTIFACT: ${{env.PACKAGE_NAME}}-${{env.OS_TAG}}-${{matrix.ReleaseName}}-${{ steps.get_version.outputs.VERSION }}
      - name: 'Upload debug files to Sentry'
        if: startsWith(github.ref, 'refs/tags/')
        run: 'python ./slobs_CI/sentry-osx.py'
        env:
           SENTRY_AUTH_TOKEN: ${{secrets.sentryAuth}}
           BUILDCONFIG: ${{matrix.BuildConfig}}

  win64:
    name: 'Windows 64-bit'
    runs-on: windows-latest
    strategy:
      matrix:
        ReleaseName: [release, debug]
        include:
        - ReleaseName: release
        - ReleaseName: debug
    env:
      OS_TAG: "win64"
    steps:
      - name: 'Add msbuild to PATH'
        uses: microsoft/setup-msbuild@v1
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
        shell: bash
      - name: Install dependencies
        run: |
          yarn install --immutable --immutable-cache --check-cache 
          yarn add electron@${{env.ElectronVersion}} -D
      - name: Configure obs-studio-node
        run: ./ci/configure-osn.cmd
        env:
          ReleaseName: ${{matrix.ReleaseName}}
      - name: Put version into package.json
        if: startsWith(github.ref, 'refs/tags/')
        run: node ci/bump-version.js "${{ steps.get_version.outputs.VERSION }}" "${{env.PACKAGE_PATH}}"
        env:
          PACKAGE_PATH: "${{env.BUILD_DIRECTORY}}/${{env.SLFullDistributePath}}/${{env.InstallPath}}"
      - name: Build obs-studio-node
        run: ./ci/build-osn.cmd
        env:
          ReleaseName: ${{matrix.ReleaseName}}
      - name: 'Run tests'
        run: 'yarn run test'
        env:
          SLOBS_BE_STREAMKEY: $(testsStreamKey)
          SLOBS_TEST_USER_POOL_TOKEN: $(userPoolToken)

          OSN_ACCESS_KEY_ID: ${{secrets.AWS_RELEASE_ACCESS_KEY_ID}}
          OSN_SECRET_ACCESS_KEY: ${{secrets.AWS_RELEASE_SECRET_ACCESS_KEY}}
          RELEASE_NAME: $(ReleaseName)
      - name: Fetch symsrv-scripts
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          repository: stream-labs/symsrv-scripts
          path: symsrv-scripts
      - name: Run symbol server scripts
        if: startsWith(github.ref, 'refs/tags/')
        run: ./symsrv-scripts/main.bat "${{ github.workspace }}/symsrv-scripts" ".\main.ps1 -pdbPaths '${{ github.workspace }}\$(BUILD_DIRECTORY)\lib-streamlabs-ipc,${{ github.workspace }}\$(BUILD_DIRECTORY)\obs-studio-client,${{ github.workspace }}\$(BUILD_DIRECTORY)\obs-studio-server' -localSourceDir '${{ github.workspace }}' -repo_userId 'stream-labs' -repo_name 'obs-studio-node' -repo_branch '${{ github.sha }}' -subModules 'lib-streamlabs-ipc,stream-labs,lib-streamlabs-ipc,streamlabs'"
        env:
          AWS_SYMB_ACCESS_KEY_ID: ${{secrets.AWS_SYMB_ACCESS_KEY_ID}}
          AWS_SYMB_SECRET_ACCESS_KEY: ${{secrets.AWS_SYMB_SECRET_ACCESS_KEY}}
        shell: powershell

      - name: 'Copy necessary dll files'
        run: ./ci/copy-files.cmd
      - name: 'Prepare tag artifact'
        if: startsWith(github.ref, 'refs/tags/')
        run: ./ci/prepare-artifact.cmd

      - name: Tar artifact for deployment
        if: startsWith(github.ref, 'refs/tags/')
        run: tar -cvzf ${{env.TARGET_ARTIFACT}}.tar.gz -C ${{env.SLFullDistributePath}} ${{env.InstallPath}}
        env:
          TARGET_ARTIFACT: ${{env.PACKAGE_NAME}}-${{ steps.get_version.outputs.VERSION }}-${{matrix.ReleaseName}}-${{env.OS_TAG}}
      - name: Configure AWS credentials
        if: startsWith(github.ref, 'refs/tags/')
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_RELEASE_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_RELEASE_SECRET_ACCESS_KEY}}
          aws-region: us-west-2
      - name: Deploy
        if: startsWith(github.ref, 'refs/tags/')
        run: aws s3 cp ${{env.TARGET_ARTIFACT}}.tar.gz s3://${{env.RELEASE_BUCKET}} --acl public-read
        env:
          TARGET_ARTIFACT: ${{env.PACKAGE_NAME}}-${{ steps.get_version.outputs.VERSION }}-${{matrix.ReleaseName}}-${{env.OS_TAG}}
